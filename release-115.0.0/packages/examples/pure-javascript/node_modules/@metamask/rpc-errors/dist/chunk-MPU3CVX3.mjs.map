{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["import type {\n  Json,\n  JsonRpcError as SerializedJsonRpcError,\n  RuntimeObject,\n} from '@metamask/utils';\nimport {\n  hasProperty,\n  isValidJson,\n  isObject,\n  isJsonRpcError,\n} from '@metamask/utils';\n\nimport { errorCodes, errorValues } from './error-constants';\n\n/**\n * A data object, that must be either:\n *\n * - A JSON-serializable object.\n * - An object with a `cause` property that is an error-like value, and any\n * other properties that are JSON-serializable.\n */\nexport type DataWithOptionalCause =\n  | Json\n  | {\n      // Unfortunately we can't use just `Json` here, because all properties of\n      // an object with an index signature must be assignable to the index\n      // signature's type. So we have to use `Json | unknown` instead.\n      [key: string]: Json | unknown;\n      cause?: unknown;\n    };\n\n/**\n * A data object, that must be either:\n *\n * - A valid DataWithOptionalCause value.\n * - undefined.\n */\nexport type OptionalDataWithOptionalCause = undefined | DataWithOptionalCause;\n\nconst FALLBACK_ERROR_CODE = errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE =\n  'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR: SerializedJsonRpcError = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE),\n};\n\nexport const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n\ntype ErrorValueKey = keyof typeof errorValues;\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param code - The error code.\n * @param fallbackMessage - The fallback message to use if the code has no\n * corresponding message.\n * @returns The message for the given code, or the fallback message if the code\n * has no corresponding message.\n */\nexport function getMessageFromCode(\n  code: unknown,\n  fallbackMessage: string = FALLBACK_MESSAGE,\n): string {\n  if (isValidCode(code)) {\n    const codeString = code.toString();\n\n    if (hasProperty(errorValues, codeString)) {\n      return errorValues[codeString as ErrorValueKey].message;\n    }\n\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is valid if it is an integer.\n *\n * @param code - The error code.\n * @returns Whether the given code is valid.\n */\nexport function isValidCode(code: unknown): code is number {\n  return Number.isInteger(code);\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.cause property.\n *\n * @param error - The error to serialize.\n * @param options - Options bag.\n * @param options.fallbackError - The error to return if the given error is\n * not compatible. Should be a JSON serializable value.\n * @param options.shouldIncludeStack - Whether to include the error's stack\n * on the returned object.\n * @returns The serialized error.\n */\nexport function serializeError(\n  error: unknown,\n  { fallbackError = FALLBACK_ERROR, shouldIncludeStack = true } = {},\n): SerializedJsonRpcError {\n  if (!isJsonRpcError(fallbackError)) {\n    throw new Error(\n      'Must provide fallback error with integer number code and string message.',\n    );\n  }\n\n  const serialized = buildError(error, fallbackError);\n\n  if (!shouldIncludeStack) {\n    delete serialized.stack;\n  }\n\n  return serialized;\n}\n\n/**\n * Construct a JSON-serializable object given an error and a JSON serializable `fallbackError`\n *\n * @param error - The error in question.\n * @param fallbackError - A JSON serializable fallback error.\n * @returns A JSON serializable error object.\n */\nfunction buildError(\n  error: unknown,\n  fallbackError: SerializedJsonRpcError,\n): SerializedJsonRpcError {\n  // If an error specifies a `serialize` function, we call it and return the result.\n  if (\n    error &&\n    typeof error === 'object' &&\n    'serialize' in error &&\n    typeof error.serialize === 'function'\n  ) {\n    return error.serialize();\n  }\n\n  if (isJsonRpcError(error)) {\n    return error;\n  }\n\n  // If the error does not match the JsonRpcError type, use the fallback error, but try to include the original error as `cause`.\n  const cause = serializeCause(error);\n  const fallbackWithCause = {\n    ...fallbackError,\n    data: { cause },\n  };\n\n  return fallbackWithCause;\n}\n\n/**\n * Check if the given code is a valid JSON-RPC server error code.\n *\n * @param code - The error code.\n * @returns Whether the given code is a valid JSON-RPC server error code.\n */\nfunction isJsonRpcServerError(code: number): boolean {\n  return code >= -32099 && code <= -32000;\n}\n\n/**\n * Serializes an unknown error to be used as the `cause` in a fallback error.\n *\n * @param error - The unknown error.\n * @returns A JSON-serializable object containing as much information about the original error as possible.\n */\nexport function serializeCause(error: unknown): Json {\n  if (Array.isArray(error)) {\n    return error.map((entry) => {\n      if (isValidJson(entry)) {\n        return entry;\n      } else if (isObject(entry)) {\n        return serializeObject(entry);\n      }\n      return null;\n    });\n  } else if (isObject(error)) {\n    return serializeObject(error);\n  }\n\n  if (isValidJson(error)) {\n    return error;\n  }\n\n  return null;\n}\n\n/**\n * Extracts all JSON-serializable properties from an object.\n *\n * @param object - The object in question.\n * @returns An object containing all the JSON-serializable properties.\n */\nfunction serializeObject(object: RuntimeObject): Json {\n  return Object.getOwnPropertyNames(object).reduce<Record<string, Json>>(\n    (acc, key) => {\n      const value = object[key];\n      if (isValidJson(value)) {\n        acc[key] = value;\n      }\n\n      return acc;\n    },\n    {},\n  );\n}\n"],"mappings":";;;;;;AAKA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AA6BP,IAAM,sBAAsB,WAAW,IAAI;AAC3C,IAAM,mBACJ;AACF,IAAM,iBAAyC;AAAA,EAC7C,MAAM;AAAA,EACN,SAAS,mBAAmB,mBAAmB;AACjD;AAEO,IAAM,gCAAgC;AActC,SAAS,mBACd,MACA,kBAA0B,kBAClB;AACR,MAAI,YAAY,IAAI,GAAG;AACrB,UAAM,aAAa,KAAK,SAAS;AAEjC,QAAI,YAAY,aAAa,UAAU,GAAG;AACxC,aAAO,YAAY,UAA2B,EAAE;AAAA,IAClD;AAEA,QAAI,qBAAqB,IAAI,GAAG;AAC9B,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AASO,SAAS,YAAY,MAA+B;AACzD,SAAO,OAAO,UAAU,IAAI;AAC9B;AAeO,SAAS,eACd,OACA,EAAE,gBAAgB,gBAAgB,qBAAqB,KAAK,IAAI,CAAC,GACzC;AACxB,MAAI,CAAC,eAAe,aAAa,GAAG;AAClC,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,QAAM,aAAa,WAAW,OAAO,aAAa;AAElD,MAAI,CAAC,oBAAoB;AACvB,WAAO,WAAW;AAAA,EACpB;AAEA,SAAO;AACT;AASA,SAAS,WACP,OACA,eACwB;AAExB,MACE,SACA,OAAO,UAAU,YACjB,eAAe,SACf,OAAO,MAAM,cAAc,YAC3B;AACA,WAAO,MAAM,UAAU;AAAA,EACzB;AAEA,MAAI,eAAe,KAAK,GAAG;AACzB,WAAO;AAAA,EACT;AAGA,QAAM,QAAQ,eAAe,KAAK;AAClC,QAAM,oBAAoB;AAAA,IACxB,GAAG;AAAA,IACH,MAAM,EAAE,MAAM;AAAA,EAChB;AAEA,SAAO;AACT;AAQA,SAAS,qBAAqB,MAAuB;AACnD,SAAO,QAAQ,UAAU,QAAQ;AACnC;AAQO,SAAS,eAAe,OAAsB;AACnD,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO,MAAM,IAAI,CAAC,UAAU;AAC1B,UAAI,YAAY,KAAK,GAAG;AACtB,eAAO;AAAA,MACT,WAAW,SAAS,KAAK,GAAG;AAC1B,eAAO,gBAAgB,KAAK;AAAA,MAC9B;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH,WAAW,SAAS,KAAK,GAAG;AAC1B,WAAO,gBAAgB,KAAK;AAAA,EAC9B;AAEA,MAAI,YAAY,KAAK,GAAG;AACtB,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAQA,SAAS,gBAAgB,QAA6B;AACpD,SAAO,OAAO,oBAAoB,MAAM,EAAE;AAAA,IACxC,CAAC,KAAK,QAAQ;AACZ,YAAM,QAAQ,OAAO,GAAG;AACxB,UAAI,YAAY,KAAK,GAAG;AACtB,YAAI,GAAG,IAAI;AAAA,MACb;AAEA,aAAO;AAAA,IACT;AAAA,IACA,CAAC;AAAA,EACH;AACF;","names":[]}