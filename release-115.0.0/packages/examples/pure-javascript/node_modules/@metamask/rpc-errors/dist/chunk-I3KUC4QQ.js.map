{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonRpcError, EthereumProviderError } from './classes';\nimport { errorCodes } from './error-constants';\nimport type { OptionalDataWithOptionalCause } from './utils';\nimport { getMessageFromCode } from './utils';\n\ntype EthereumErrorOptions<Data extends OptionalDataWithOptionalCause> = {\n  message?: string;\n  data?: Data;\n};\n\ntype ServerErrorOptions<Data extends OptionalDataWithOptionalCause> = {\n  code: number;\n} & EthereumErrorOptions<Data>;\n\ntype CustomErrorArg<Data extends OptionalDataWithOptionalCause> =\n  ServerErrorOptions<Data>;\n\ntype JsonRpcErrorsArg<Data extends OptionalDataWithOptionalCause> =\n  | EthereumErrorOptions<Data>\n  | string;\n\nexport const rpcErrors = {\n  /**\n   * Get a JSON RPC 2.0 Parse (-32700) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  parse: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.parse, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidRequest: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.invalidRequest, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidParams: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.invalidParams, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotFound: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotFound, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Internal (-32603) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  internal: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.internal, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32005 ] range.\n   * Codes -32000 through -32004 are reserved by EIP-1474.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  server: <Data extends OptionalDataWithOptionalCause>(\n    opts: ServerErrorOptions<Data>,\n  ) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum RPC Server errors must provide single object argument.',\n      );\n    }\n    const { code } = opts;\n    if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n      throw new Error(\n        '\"code\" must be an integer such that: -32099 <= code <= -32005',\n      );\n    }\n    return getJsonRpcError(code, opts);\n  },\n\n  /**\n   * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidInput: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.invalidInput, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceNotFound: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceNotFound, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceUnavailable: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceUnavailable, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  transactionRejected: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.transactionRejected, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotSupported: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotSupported, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  limitExceeded: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => getJsonRpcError(errorCodes.rpc.limitExceeded, arg),\n};\n\nexport const providerErrors = {\n  /**\n   * Get an Ethereum Provider User Rejected Request (4001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  userRejectedRequest: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.userRejectedRequest, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unauthorized (4100) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unauthorized: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unauthorized, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unsupported Method (4200) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unsupportedMethod: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unsupportedMethod, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Not Connected (4900) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  disconnected: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.disconnected, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Chain Not Connected (4901) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  chainDisconnected: <Data extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<Data>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.chainDisconnected, arg);\n  },\n\n  /**\n   * Get a custom Ethereum Provider error.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  custom: <Data extends OptionalDataWithOptionalCause>(\n    opts: CustomErrorArg<Data>,\n  ) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum Provider custom errors must provide single object argument.',\n      );\n    }\n\n    const { code, message, data } = opts;\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string');\n    }\n    return new EthereumProviderError(code, message, data);\n  },\n};\n\n/**\n * Get a generic JSON-RPC error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link JsonRpcError} class.\n */\nfunction getJsonRpcError<Data extends OptionalDataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<Data>,\n): JsonRpcError<Data> {\n  const [message, data] = parseOpts(arg);\n  return new JsonRpcError(code, message ?? getMessageFromCode(code), data);\n}\n\n/**\n * Get an Ethereum Provider error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link EthereumProviderError} class.\n */\nfunction getEthProviderError<Data extends OptionalDataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<Data>,\n): EthereumProviderError<Data> {\n  const [message, data] = parseOpts(arg);\n  return new EthereumProviderError(\n    code,\n    message ?? getMessageFromCode(code),\n    data,\n  );\n}\n\n/**\n * Get an error message and optional data from an options bag.\n *\n * @param arg - The error message or options bag.\n * @returns A tuple containing the error message and optional data.\n */\nfunction parseOpts<Data extends OptionalDataWithOptionalCause>(\n  arg?: JsonRpcErrorsArg<Data>,\n): [message?: string | undefined, data?: Data | undefined] {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const { message, data } = arg;\n\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message ?? undefined, data];\n    }\n  }\n\n  return [];\n}\n"]}