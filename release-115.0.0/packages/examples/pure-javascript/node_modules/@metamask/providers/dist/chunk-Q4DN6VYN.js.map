{"version":3,"sources":["../src/siteMetadata.ts"],"names":["document"],"mappings":";;;;;;;;AAYA,eAAsB,iBACpB,QACA,KACe;AACf,MAAI;AACF,UAAM,iBAAiB,MAAM,gBAAgB;AAE7C,WAAO;AAAA,MACL;AAAA,QACE,SAAS;AAAA,QACT,IAAI;AAAA,QACJ,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,QAAI,MAAM;AAAA,MACR,SAAS,iBAAS,OAAO,iBAAiB;AAAA,MAC1C,eAAe;AAAA,IACjB,CAAC;AAAA,EACH;AACF;AAOA,eAAe,kBAAkB;AAC/B,SAAO;AAAA,IACL,MAAM,YAAY,MAAM;AAAA,IACxB,MAAM,MAAM,YAAY,MAAM;AAAA,EAChC;AACF;AAQA,SAAS,YAAY,cAAqC;AACxD,QAAM,EAAE,UAAAA,UAAS,IAAI;AAErB,QAAM,WAAmCA,UAAS;AAAA,IAChD;AAAA,EACF;AACA,MAAI,UAAU;AACZ,WAAO,SAAS;AAAA,EAClB;AAEA,QAAM,YAAoCA,UAAS;AAAA,IACjD;AAAA,EACF;AACA,MAAI,WAAW;AACb,WAAO,UAAU;AAAA,EACnB;AAEA,MAAIA,UAAS,SAASA,UAAS,MAAM,SAAS,GAAG;AAC/C,WAAOA,UAAS;AAAA,EAClB;AAEA,SAAO,OAAO,SAAS;AACzB;AAQA,eAAe,YACb,cACwB;AACxB,QAAM,EAAE,UAAAA,UAAS,IAAI;AAErB,QAAM,QAAqCA,UAAS;AAAA,IAClD;AAAA,EACF;AACA,aAAW,QAAQ,MAAM,KAAK,KAAK,GAAG;AACpC,QAAI,QAAS,MAAM,UAAU,KAAK,IAAI,GAAI;AACxC,aAAO,KAAK;AAAA,IACd;AAAA,EACF;AAEA,SAAO;AACT;AAQA,eAAe,UAAU,KAA+B;AACtD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI;AACF,YAAM,MAAM,SAAS,cAAc,KAAK;AACxC,UAAI,SAAS,MAAM,QAAQ,IAAI;AAC/B,UAAI,UAAU,MAAM,QAAQ,KAAK;AACjC,UAAI,MAAM;AAAA,IACZ,SAAS,OAAO;AACd,aAAO,KAAK;AAAA,IACd;AAAA,EACF,CAAC;AACH","sourcesContent":["import type { JsonRpcEngine } from '@metamask/json-rpc-engine';\n\nimport messages from './messages';\nimport type { ConsoleLike } from './utils';\nimport { NOOP } from './utils';\n\n/**\n * Sends site metadata over an RPC request.\n *\n * @param engine - The JSON RPC Engine to send metadata over.\n * @param log - The logging API to use.\n */\nexport async function sendSiteMetadata(\n  engine: JsonRpcEngine,\n  log: ConsoleLike,\n): Promise<void> {\n  try {\n    const domainMetadata = await getSiteMetadata();\n    // call engine.handle directly to avoid normal RPC request handling\n    engine.handle(\n      {\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'metamask_sendDomainMetadata',\n        params: domainMetadata,\n      },\n      NOOP,\n    );\n  } catch (error) {\n    log.error({\n      message: messages.errors.sendSiteMetadata(),\n      originalError: error,\n    });\n  }\n}\n\n/**\n * Get site metadata.\n *\n * @returns The site metadata.\n */\nasync function getSiteMetadata() {\n  return {\n    name: getSiteName(window),\n    icon: await getSiteIcon(window),\n  };\n}\n\n/**\n * Extract a name for the site from the DOM.\n *\n * @param windowObject - The window object to extract the site name from.\n * @returns The site name.\n */\nfunction getSiteName(windowObject: typeof window): string {\n  const { document } = windowObject;\n\n  const siteName: HTMLMetaElement | null = document.querySelector(\n    'head > meta[property=\"og:site_name\"]',\n  );\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle: HTMLMetaElement | null = document.querySelector(\n    'head > meta[name=\"title\"]',\n  );\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n}\n\n/**\n * Extract an icon for the site from the DOM.\n *\n * @param windowObject - The window object to extract the site icon from.\n * @returns An icon URL, if one exists.\n */\nasync function getSiteIcon(\n  windowObject: typeof window,\n): Promise<string | null> {\n  const { document } = windowObject;\n\n  const icons: NodeListOf<HTMLLinkElement> = document.querySelectorAll(\n    'head > link[rel~=\"icon\"]',\n  );\n  for (const icon of Array.from(icons)) {\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Return whether the given image URL exists.\n *\n * @param url - The url of the image.\n * @returns Whether the image exists.\n */\nasync function imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement('img');\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"]}