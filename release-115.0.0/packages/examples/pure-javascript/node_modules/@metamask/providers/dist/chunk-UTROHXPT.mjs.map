{"version":3,"sources":["../src/StreamProvider.ts"],"sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport { createStreamMiddleware } from '@metamask/json-rpc-middleware-stream';\nimport ObjectMultiplex from '@metamask/object-multiplex';\nimport type SafeEventEmitter from '@metamask/safe-event-emitter';\nimport type { Json, JsonRpcParams } from '@metamask/utils';\nimport { duplex as isDuplex } from 'is-stream';\nimport { pipeline } from 'readable-stream';\nimport type { Duplex } from 'readable-stream';\n\nimport type { BaseProviderOptions } from './BaseProvider';\nimport { BaseProvider } from './BaseProvider';\nimport messages from './messages';\nimport {\n  EMITTED_NOTIFICATIONS,\n  isValidChainId,\n  isValidNetworkVersion,\n} from './utils';\n\nexport type StreamProviderOptions = {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName: string;\n} & BaseProviderOptions;\n\nexport type JsonRpcConnection = {\n  events: SafeEventEmitter;\n  middleware: JsonRpcMiddleware<JsonRpcParams, Json>;\n  stream: Duplex;\n};\n\n/**\n * An abstract EIP-1193 provider wired to some duplex stream via a\n * `json-rpc-middleware-stream` JSON-RPC stream middleware. Implementers must\n * call {@link AbstractStreamProvider._initializeStateAsync} after instantiation\n * to initialize the provider's state.\n */\nexport abstract class AbstractStreamProvider extends BaseProvider {\n  protected _jsonRpcConnection: JsonRpcConnection;\n\n  /**\n   * Creates a new AbstractStreamProvider instance.\n   *\n   * @param connectionStream - A Node.js duplex stream.\n   * @param options - An options bag.\n   * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n   * @param options.logger - The logging API to use. Default: `console`.\n   * @param options.maxEventListeners - The maximum number of event\n   * listeners. Default: 100.\n   * @param options.rpcMiddleware - The RPC middleware stack to use.\n   */\n  constructor(\n    connectionStream: Duplex,\n    {\n      jsonRpcStreamName,\n      logger = console,\n      maxEventListeners = 100,\n      rpcMiddleware = [],\n    }: StreamProviderOptions,\n  ) {\n    super({ logger, maxEventListeners, rpcMiddleware });\n\n    if (!isDuplex(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    // Bind functions to prevent consumers from making unbound calls\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    // Set up connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pipeline(\n      connectionStream,\n      mux as unknown as Duplex,\n      connectionStream,\n      this._handleStreamDisconnect.bind(this, 'MetaMask'),\n    );\n\n    // Set up RPC connection\n    // Typecast: The type of `Duplex` is incompatible with the type of\n    // `JsonRpcConnection`.\n    this._jsonRpcConnection = createStreamMiddleware({\n      retryOnMessage: 'METAMASK_EXTENSION_CONNECT_CAN_RETRY',\n    }) as unknown as JsonRpcConnection;\n\n    pipeline(\n      this._jsonRpcConnection.stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Duplex,\n      this._jsonRpcConnection.stream,\n      this._handleStreamDisconnect.bind(this, 'MetaMask RpcProvider'),\n    );\n\n    // Wire up the JsonRpcEngine to the JSON-RPC connection stream\n    this._rpcEngine.push(this._jsonRpcConnection.middleware);\n\n    // Handle JSON-RPC notifications\n    this._jsonRpcConnection.events.on('notification', (payload) => {\n      const { method, params } = payload;\n      if (method === 'metamask_accountsChanged') {\n        this._handleAccountsChanged(params);\n      } else if (method === 'metamask_unlockStateChanged') {\n        this._handleUnlockStateChanged(params);\n      } else if (method === 'metamask_chainChanged') {\n        this._handleChainChanged(params);\n      } else if (EMITTED_NOTIFICATIONS.includes(method)) {\n        this.emit('message', {\n          type: method,\n          data: params,\n        });\n      } else if (method === 'METAMASK_STREAM_FAILURE') {\n        connectionStream.destroy(\n          new Error(messages.errors.permanentlyDisconnected()),\n        );\n      }\n    });\n  }\n\n  //====================\n  // Private Methods\n  //====================\n\n  /**\n   * MUST be called by child classes.\n   *\n   * Calls `metamask_getProviderState` and passes the result to\n   * {@link BaseProvider._initializeState}. Logs an error if getting initial state\n   * fails. Throws if called after initialization has completed.\n   */\n  protected async _initializeStateAsync() {\n    let initialState: Parameters<BaseProvider['_initializeState']>[0];\n\n    try {\n      initialState = (await this.request({\n        method: 'metamask_getProviderState',\n      })) as Parameters<BaseProvider['_initializeState']>[0];\n    } catch (error) {\n      this._log.error(\n        'MetaMask: Failed to get initial state. Please report this bug.',\n        error,\n      );\n    }\n    this._initializeState(initialState);\n  }\n\n  /**\n   * Called when connection is lost to critical streams. Emits an 'error' event\n   * from the provider with the error message and stack if present.\n   *\n   * @param streamName - The name of the stream that disconnected.\n   * @param error - The error that caused the disconnection.\n   * @fires BaseProvider#disconnect - If the provider is not already\n   * disconnected.\n   */\n  // eslint-disable-next-line no-restricted-syntax\n  private _handleStreamDisconnect(streamName: string, error: Error | null) {\n    let warningMsg = `MetaMask: Lost connection to \"${streamName}\".`;\n    if (error?.stack) {\n      warningMsg += `\\n${error.stack}`;\n    }\n\n    this._log.warn(warningMsg);\n    if (this.listenerCount('error') > 0) {\n      this.emit('error', warningMsg);\n    }\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state. This class does not have a\n   * `networkVersion` property, but we rely on receiving a `networkVersion`\n   * with the value of `loading` to detect when the network is changing and\n   * a recoverable `disconnect` even has occurred. Child classes that use the\n   * `networkVersion` for other purposes must implement additional handling\n   * therefore.\n   *\n   * @fires BaseProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   * @param networkInfo.chainId - The latest chain ID.\n   * @param networkInfo.networkVersion - The latest network ID.\n   */\n  protected _handleChainChanged({\n    chainId,\n    networkVersion,\n  }: {\n    chainId?: string | undefined;\n    networkVersion?: string | undefined;\n  } = {}) {\n    if (!isValidChainId(chainId) || !isValidNetworkVersion(networkVersion)) {\n      this._log.error(messages.errors.invalidNetworkParams(), {\n        chainId,\n        networkVersion,\n      });\n      return;\n    }\n\n    if (networkVersion === 'loading') {\n      this._handleDisconnect(true);\n    } else {\n      super._handleChainChanged({ chainId });\n    }\n  }\n}\n\n/**\n * An EIP-1193 provider wired to some duplex stream via a\n * `json-rpc-middleware-stream` JSON-RPC stream middleware. Consumers must\n * call {@link StreamProvider.initialize} after instantiation to complete\n * initialization.\n */\nexport class StreamProvider extends AbstractStreamProvider {\n  /**\n   * MUST be called after instantiation to complete initialization.\n   *\n   * Calls `metamask_getProviderState` and passes the result to\n   * {@link BaseProvider._initializeState}. Logs an error if getting initial state\n   * fails. Throws if called after initialization has completed.\n   */\n  async initialize() {\n    return this._initializeStateAsync();\n  }\n}\n"],"mappings":"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","names":[]}