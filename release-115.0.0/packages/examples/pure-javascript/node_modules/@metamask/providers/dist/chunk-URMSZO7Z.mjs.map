{"version":3,"sources":["../src/MetaMaskInpageProvider.ts"],"sourcesContent":["import { rpcErrors } from '@metamask/rpc-errors';\nimport type { Json, JsonRpcRequest, JsonRpcResponse } from '@metamask/utils';\nimport type { Duplex } from 'readable-stream';\n\nimport type { UnvalidatedJsonRpcRequest } from './BaseProvider';\nimport messages from './messages';\nimport { sendSiteMetadata } from './siteMetadata';\nimport type { StreamProviderOptions } from './StreamProvider';\nimport { AbstractStreamProvider } from './StreamProvider';\nimport {\n  EMITTED_NOTIFICATIONS,\n  getDefaultExternalMiddleware,\n  getRpcPromiseCallback,\n  NOOP,\n} from './utils';\n\nexport type SendSyncJsonRpcRequest = {\n  method:\n    | 'eth_accounts'\n    | 'eth_coinbase'\n    | 'eth_uninstallFilter'\n    | 'net_version';\n} & JsonRpcRequest;\n\ntype WarningEventName = keyof SentWarningsState['events'];\n\nexport type MetaMaskInpageProviderOptions = {\n  /**\n   * Whether the provider should send page metadata.\n   */\n  shouldSendMetadata?: boolean;\n\n  jsonRpcStreamName?: string | undefined;\n} & Partial<Omit<StreamProviderOptions, 'rpcMiddleware'>>;\n\ntype SentWarningsState = {\n  // properties\n  chainId: boolean;\n  networkVersion: boolean;\n  selectedAddress: boolean;\n  // methods\n  enable: boolean;\n  experimentalMethods: boolean;\n  send: boolean;\n  // events\n  events: {\n    close: boolean;\n    data: boolean;\n    networkChanged: boolean;\n    notification: boolean;\n  };\n};\n\n/**\n * The name of the stream consumed by {@link MetaMaskInpageProvider}.\n */\nexport const MetaMaskInpageProviderStreamName = 'metamask-provider';\n\nexport class MetaMaskInpageProvider extends AbstractStreamProvider {\n  protected _sentWarnings: SentWarningsState = {\n    // properties\n    chainId: false,\n    networkVersion: false,\n    selectedAddress: false,\n    // methods\n    enable: false,\n    experimentalMethods: false,\n    send: false,\n    // events\n    events: {\n      close: false,\n      data: false,\n      networkChanged: false,\n      notification: false,\n    },\n  };\n\n  /**\n   * Experimental methods can be found here.\n   */\n  public readonly _metamask: ReturnType<\n    MetaMaskInpageProvider['_getExperimentalApi']\n  >;\n\n  #networkVersion: string | null;\n\n  /**\n   * Indicating that this provider is a MetaMask provider.\n   */\n  public readonly isMetaMask: true;\n\n  /**\n   * Creates a new `MetaMaskInpageProvider`.\n   *\n   * @param connectionStream - A Node.js duplex stream.\n   * @param options - An options bag.\n   * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n   * Default: `metamask-provider`.\n   * @param options.logger - The logging API to use. Default: `console`.\n   * @param options.maxEventListeners - The maximum number of event\n   * listeners. Default: 100.\n   * @param options.shouldSendMetadata - Whether the provider should\n   * send page metadata. Default: `true`.\n   */\n  constructor(\n    connectionStream: Duplex,\n    {\n      jsonRpcStreamName = MetaMaskInpageProviderStreamName,\n      logger = console,\n      maxEventListeners = 100,\n      shouldSendMetadata,\n    }: MetaMaskInpageProviderOptions = {},\n  ) {\n    super(connectionStream, {\n      jsonRpcStreamName,\n      logger,\n      maxEventListeners,\n      rpcMiddleware: getDefaultExternalMiddleware(logger),\n    });\n\n    // We shouldn't perform asynchronous work in the constructor, but at one\n    // point we started doing so, and changing this class isn't worth it at\n    // the time of writing.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._initializeStateAsync();\n\n    this.#networkVersion = null;\n    this.isMetaMask = true;\n\n    this._sendSync = this._sendSync.bind(this);\n    this.enable = this.enable.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this._warnOfDeprecation = this._warnOfDeprecation.bind(this);\n\n    this._metamask = this._getExperimentalApi();\n\n    // handle JSON-RPC notifications\n    this._jsonRpcConnection.events.on('notification', (payload) => {\n      const { method } = payload;\n      if (EMITTED_NOTIFICATIONS.includes(method)) {\n        // deprecated\n        // emitted here because that was the original order\n        this.emit('data', payload);\n        // deprecated\n        this.emit('notification', payload.params.result);\n      }\n    });\n\n    // send website metadata\n    if (shouldSendMetadata) {\n      if (document.readyState === 'complete') {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        sendSiteMetadata(this._rpcEngine, this._log);\n      } else {\n        const domContentLoadedHandler = () => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          sendSiteMetadata(this._rpcEngine, this._log);\n          window.removeEventListener(\n            'DOMContentLoaded',\n            domContentLoadedHandler,\n          );\n        };\n        window.addEventListener('DOMContentLoaded', domContentLoadedHandler);\n      }\n    }\n  }\n\n  //====================\n  // Deprecated Properties\n  //====================\n\n  get chainId(): string | null {\n    if (!this._sentWarnings.chainId) {\n      this._log.warn(messages.warnings.chainIdDeprecation);\n      this._sentWarnings.chainId = true;\n    }\n    return super.chainId;\n  }\n\n  get networkVersion(): string | null {\n    if (!this._sentWarnings.networkVersion) {\n      this._log.warn(messages.warnings.networkVersionDeprecation);\n      this._sentWarnings.networkVersion = true;\n    }\n    return this.#networkVersion;\n  }\n\n  get selectedAddress(): string | null {\n    if (!this._sentWarnings.selectedAddress) {\n      this._log.warn(messages.warnings.selectedAddressDeprecation);\n      this._sentWarnings.selectedAddress = true;\n    }\n    return super.selectedAddress;\n  }\n\n  //====================\n  // Public Methods\n  //====================\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @param payload - The RPC request object.\n   * @param callback - The callback function.\n   */\n  sendAsync(\n    payload: JsonRpcRequest,\n    callback: (error: Error | null, result?: JsonRpcResponse<Json>) => void,\n  ): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  /**\n   * We override the following event methods so that we can warn consumers\n   * about deprecated events:\n   * `addListener`, `on`, `once`, `prependListener`, `prependOnceListener`.\n   */\n\n  addListener(eventName: string, listener: (...args: unknown[]) => void) {\n    this._warnOfDeprecation(eventName);\n    return super.addListener(eventName, listener);\n  }\n\n  on(eventName: string, listener: (...args: unknown[]) => void) {\n    this._warnOfDeprecation(eventName);\n    return super.on(eventName, listener);\n  }\n\n  once(eventName: string, listener: (...args: unknown[]) => void) {\n    this._warnOfDeprecation(eventName);\n    return super.once(eventName, listener);\n  }\n\n  prependListener(eventName: string, listener: (...args: unknown[]) => void) {\n    this._warnOfDeprecation(eventName);\n    return super.prependListener(eventName, listener);\n  }\n\n  prependOnceListener(\n    eventName: string,\n    listener: (...args: unknown[]) => void,\n  ) {\n    this._warnOfDeprecation(eventName);\n    return super.prependOnceListener(eventName, listener);\n  }\n\n  //====================\n  // Private Methods\n  //====================\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes.\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * @fires BaseProvider#disconnect - If the disconnection is not recoverable.\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string) {\n    super._handleDisconnect(isRecoverable, errorMessage);\n    if (this.#networkVersion && !isRecoverable) {\n      this.#networkVersion = null;\n    }\n  }\n\n  /**\n   * Warns of deprecation for the given event, if applicable.\n   *\n   * @param eventName - The name of the event.\n   */\n  protected _warnOfDeprecation(eventName: string): void {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-boolean-literal-compare\n    if (this._sentWarnings?.events[eventName as WarningEventName] === false) {\n      this._log.warn(messages.warnings.events[eventName as WarningEventName]);\n      this._sentWarnings.events[eventName as WarningEventName] = true;\n    }\n  }\n\n  //====================\n  // Deprecated Methods\n  //====================\n\n  /**\n   * Equivalent to: `ethereum.request('eth_requestAccounts')`.\n   *\n   * @deprecated Use request({ method: 'eth_requestAccounts' }) instead.\n   * @returns A promise that resolves to an array of addresses.\n   */\n  async enable(): Promise<string[]> {\n    if (!this._sentWarnings.enable) {\n      this._log.warn(messages.warnings.enableDeprecation);\n      this._sentWarnings.enable = true;\n    }\n\n    return new Promise<string[]>((resolve, reject) => {\n      try {\n        this._rpcRequest(\n          { method: 'eth_requestAccounts', params: [] },\n          getRpcPromiseCallback(resolve, reject),\n        );\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   *\n   * @deprecated Use \"request\" instead.\n   * @param method - The method to request.\n   * @param params - Any params for the method.\n   * @returns A Promise that resolves with the JSON-RPC response object for the\n   * request.\n   */\n  send<Type extends Json>(\n    method: string,\n    params?: Type[],\n  ): Promise<JsonRpcResponse<Type>>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @deprecated Use \"request\" instead.\n   * @param payload - A JSON-RPC request object.\n   * @param callback - An error-first callback that will receive the JSON-RPC\n   * response object.\n   */\n  send<Type extends Json>(\n    payload: JsonRpcRequest,\n    callback: (error: Error | null, result?: JsonRpcResponse<Type>) => void,\n  ): void;\n\n  /**\n   * Accepts a JSON-RPC request object, and synchronously returns the cached result\n   * for the given method. Only supports 4 specific RPC methods.\n   *\n   * @deprecated Use \"request\" instead.\n   * @param payload - A JSON-RPC request object.\n   * @returns A JSON-RPC response object.\n   */\n  send<Type extends Json>(\n    payload: SendSyncJsonRpcRequest,\n  ): JsonRpcResponse<Type>;\n\n  // eslint-disable-next-line @typescript-eslint/promise-function-async\n  send(methodOrPayload: unknown, callbackOrArgs?: unknown): unknown {\n    if (!this._sentWarnings.send) {\n      this._log.warn(messages.warnings.sendDeprecation);\n      this._sentWarnings.send = true;\n    }\n\n    if (\n      typeof methodOrPayload === 'string' &&\n      (!callbackOrArgs || Array.isArray(callbackOrArgs))\n    ) {\n      return new Promise((resolve, reject) => {\n        try {\n          this._rpcRequest(\n            { method: methodOrPayload, params: callbackOrArgs },\n            getRpcPromiseCallback(resolve, reject, false),\n          );\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } else if (\n      methodOrPayload &&\n      typeof methodOrPayload === 'object' &&\n      typeof callbackOrArgs === 'function'\n    ) {\n      return this._rpcRequest(\n        methodOrPayload as JsonRpcRequest,\n        callbackOrArgs as (...args: unknown[]) => void,\n      );\n    }\n    return this._sendSync(methodOrPayload as SendSyncJsonRpcRequest);\n  }\n\n  /**\n   * Internal backwards compatibility method, used in send.\n   *\n   * @param payload - A JSON-RPC request object.\n   * @returns A JSON-RPC response object.\n   * @deprecated\n   */\n  protected _sendSync(payload: SendSyncJsonRpcRequest) {\n    let result;\n    switch (payload.method) {\n      case 'eth_accounts':\n        result = this.selectedAddress ? [this.selectedAddress] : [];\n        break;\n\n      case 'eth_coinbase':\n        result = this.selectedAddress ?? null;\n        break;\n\n      case 'eth_uninstallFilter':\n        this._rpcRequest(payload, NOOP);\n        result = true;\n        break;\n\n      case 'net_version':\n        result = this.#networkVersion ?? null;\n        break;\n\n      default:\n        throw new Error(messages.errors.unsupportedSync(payload.method));\n    }\n\n    return {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      result,\n    };\n  }\n\n  /**\n   * Constructor helper.\n   *\n   * Gets the experimental _metamask API as Proxy, so that we can warn consumers\n   * about its experimental nature.\n   *\n   * @returns The experimental _metamask API.\n   */\n  protected _getExperimentalApi() {\n    return new Proxy(\n      {\n        /**\n         * Determines if MetaMask is unlocked by the user.\n         *\n         * @returns Promise resolving to true if MetaMask is currently unlocked.\n         */\n        isUnlocked: async () => {\n          if (!this._state.initialized) {\n            await new Promise<void>((resolve) => {\n              this.on('_initialized', () => resolve());\n            });\n          }\n          return this._state.isUnlocked;\n        },\n\n        /**\n         * Make a batch RPC request.\n         *\n         * @param requests - The RPC requests to make.\n         */\n        requestBatch: async (requests: UnvalidatedJsonRpcRequest[]) => {\n          if (!Array.isArray(requests)) {\n            throw rpcErrors.invalidRequest({\n              message:\n                'Batch requests must be made with an array of request objects.',\n              data: requests,\n            });\n          }\n\n          return new Promise((resolve, reject) => {\n            this._rpcRequest(requests, getRpcPromiseCallback(resolve, reject));\n          });\n        },\n      },\n      {\n        get: (obj, prop, ...args) => {\n          if (!this._sentWarnings.experimentalMethods) {\n            this._log.warn(messages.warnings.experimentalMethods);\n            this._sentWarnings.experimentalMethods = true;\n          }\n          return Reflect.get(obj, prop, ...args);\n        },\n      },\n    );\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state. Does nothing if neither the chainId\n   * nor the networkVersion are different from existing values.\n   *\n   * @fires MetamaskInpageProvider#networkChanged\n   * @param networkInfo - An object with network info.\n   * @param networkInfo.chainId - The latest chain ID.\n   * @param networkInfo.networkVersion - The latest network ID.\n   */\n  protected _handleChainChanged({\n    chainId,\n    networkVersion,\n  }: { chainId?: string; networkVersion?: string } = {}) {\n    // This will validate the params and disconnect the provider if the\n    // networkVersion is 'loading'.\n    super._handleChainChanged({ chainId, networkVersion });\n\n    if (this._state.isConnected && networkVersion !== this.#networkVersion) {\n      this.#networkVersion = networkVersion as string;\n      if (this._state.initialized) {\n        this.emit('networkChanged', this.#networkVersion);\n      }\n    }\n  }\n}\n"],"mappings":"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","names":[]}