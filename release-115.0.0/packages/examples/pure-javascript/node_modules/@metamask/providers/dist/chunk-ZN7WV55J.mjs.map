{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport { createIdRemapMiddleware } from '@metamask/json-rpc-engine';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type {\n  Json,\n  JsonRpcParams,\n  PendingJsonRpcResponse,\n} from '@metamask/utils';\n\nimport { createRpcWarningMiddleware } from './middleware/createRpcWarningMiddleware';\n\nexport type Maybe<Type> = Partial<Type> | null | undefined;\n\nexport type ConsoleLike = Pick<\n  Console,\n  'log' | 'warn' | 'error' | 'debug' | 'info' | 'trace'\n>;\n\n// Constants\n\nexport const EMITTED_NOTIFICATIONS = Object.freeze([\n  'eth_subscription', // per eth-json-rpc-filters/subscriptionManager\n]);\n\n// Utility functions\n\n/**\n * Gets the default middleware for external providers, consisting of an ID\n * remapping middleware and an error middleware.\n *\n * @param logger - The logger to use in the error middleware.\n * @returns An array of @metamask/json-rpc-engine middleware functions.\n */\nexport const getDefaultExternalMiddleware = (logger: ConsoleLike = console) => [\n  createIdRemapMiddleware(),\n  createErrorMiddleware(logger),\n  createRpcWarningMiddleware(logger),\n];\n\n/**\n * A `json-rpc-engine` middleware that logs RPC errors and validates the request\n * method.\n *\n * @param log - The logging API to use.\n * @returns A @metamask/json-rpc-engine middleware function.\n */\nfunction createErrorMiddleware(\n  log: ConsoleLike,\n): JsonRpcMiddleware<JsonRpcParams, Json> {\n  return (request, response, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof request.method !== 'string' || !request.method) {\n      response.error = rpcErrors.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: request,\n      });\n    }\n\n    next((done) => {\n      const { error } = response;\n      if (!error) {\n        return done();\n      }\n      log.error(`MetaMask - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n// resolve response.result or response, reject errors\nexport const getRpcPromiseCallback =\n  (\n    resolve: (value?: any) => void,\n    reject: (error?: Error) => void,\n    unwrapResult = true,\n  ) =>\n  (error: Error, response: PendingJsonRpcResponse<Json>): void => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else {\n      !unwrapResult || Array.isArray(response)\n        ? resolve(response)\n        : resolve(response.result);\n    }\n  };\n\n/**\n * Checks whether the given chain ID is valid, meaning if it is non-empty,\n * '0x'-prefixed string.\n *\n * @param chainId - The chain ID to validate.\n * @returns Whether the given chain ID is valid.\n */\nexport const isValidChainId = (chainId: unknown): chainId is string =>\n  Boolean(chainId) && typeof chainId === 'string' && chainId.startsWith('0x');\n\n/**\n * Checks whether the given network version is valid, meaning if it is non-empty\n * string.\n *\n * @param networkVersion - The network version to validate.\n * @returns Whether the given network version is valid.\n */\nexport const isValidNetworkVersion = (\n  networkVersion: unknown,\n): networkVersion is string =>\n  Boolean(networkVersion) && typeof networkVersion === 'string';\n\nexport const NOOP = () => undefined;\n"],"mappings":";;;;;AACA,SAAS,+BAA+B;AACxC,SAAS,iBAAiB;AAkBnB,IAAM,wBAAwB,OAAO,OAAO;AAAA,EACjD;AAAA;AACF,CAAC;AAWM,IAAM,+BAA+B,CAAC,SAAsB,YAAY;AAAA,EAC7E,wBAAwB;AAAA,EACxB,sBAAsB,MAAM;AAAA,EAC5B,2BAA2B,MAAM;AACnC;AASA,SAAS,sBACP,KACwC;AACxC,SAAO,CAAC,SAAS,UAAU,SAAS;AAElC,QAAI,OAAO,QAAQ,WAAW,YAAY,CAAC,QAAQ,QAAQ;AACzD,eAAS,QAAQ,UAAU,eAAe;AAAA,QACxC,SAAS;AAAA,QACT,MAAM;AAAA,MACR,CAAC;AAAA,IACH;AAEA,SAAK,CAAC,SAAS;AACb,YAAM,EAAE,MAAM,IAAI;AAClB,UAAI,CAAC,OAAO;AACV,eAAO,KAAK;AAAA,MACd;AACA,UAAI,MAAM,yBAAyB,MAAM,OAAO,IAAI,KAAK;AACzD,aAAO,KAAK;AAAA,IACd,CAAC;AAAA,EACH;AACF;AAGO,IAAM,wBACX,CACE,SACA,QACA,eAAe,SAEjB,CAAC,OAAc,aAAiD;AAC9D,MAAI,SAAS,SAAS,OAAO;AAC3B,WAAO,SAAS,SAAS,KAAK;AAAA,EAChC,OAAO;AACL,KAAC,gBAAgB,MAAM,QAAQ,QAAQ,IACnC,QAAQ,QAAQ,IAChB,QAAQ,SAAS,MAAM;AAAA,EAC7B;AACF;AASK,IAAM,iBAAiB,CAAC,YAC7B,QAAQ,OAAO,KAAK,OAAO,YAAY,YAAY,QAAQ,WAAW,IAAI;AASrE,IAAM,wBAAwB,CACnC,mBAEA,QAAQ,cAAc,KAAK,OAAO,mBAAmB;AAEhD,IAAM,OAAO,MAAM;","names":[]}