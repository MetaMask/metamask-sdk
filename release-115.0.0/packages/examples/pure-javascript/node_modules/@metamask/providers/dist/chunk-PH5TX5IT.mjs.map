{"version":3,"sources":["../src/extension-provider/createExternalExtensionProvider.ts","../src/extension-provider/external-extension-config.json"],"sourcesContent":["import { detect } from 'detect-browser';\nimport PortStream from 'extension-port-stream';\nimport type { Duplex } from 'readable-stream';\nimport type { Runtime } from 'webextension-polyfill';\n\nimport config from './external-extension-config.json';\nimport { MetaMaskInpageProviderStreamName } from '../MetaMaskInpageProvider';\nimport { StreamProvider } from '../StreamProvider';\nimport { getDefaultExternalMiddleware } from '../utils';\n\nconst browser = detect();\n\nexport type ExtensionType = 'stable' | 'flask' | 'beta' | string;\n\n/**\n * Creates an external extension provider for the given extension type or ID.\n *\n * @param typeOrId - The extension type or ID.\n * @returns The external extension provider.\n */\nexport function createExternalExtensionProvider(\n  typeOrId: ExtensionType = 'stable',\n) {\n  let provider;\n\n  try {\n    const extensionId = getExtensionId(typeOrId);\n    const metamaskPort = chrome.runtime.connect(extensionId) as Runtime.Port;\n\n    const pluginStream = new PortStream(metamaskPort);\n    provider = new StreamProvider(pluginStream as unknown as Duplex, {\n      jsonRpcStreamName: MetaMaskInpageProviderStreamName,\n      logger: console,\n      rpcMiddleware: getDefaultExternalMiddleware(console),\n    });\n\n    // This is asynchronous but merely logs an error and does not throw upon\n    // failure. Previously this just happened as a side-effect in the\n    // constructor.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    provider.initialize();\n  } catch (error) {\n    console.dir(`MetaMask connect error.`, error);\n    throw error;\n  }\n  return provider;\n}\n\n/**\n * Gets the extension ID for the given extension type or ID.\n *\n * @param typeOrId - The extension type or ID.\n * @returns The extension ID.\n */\nfunction getExtensionId(typeOrId: ExtensionType) {\n  const ids =\n    browser?.name === 'firefox' ? config.firefoxIds : config.chromeIds;\n  return ids[typeOrId as keyof typeof ids] ?? typeOrId;\n}\n","{\n  \"chromeIds\": {\n    \"stable\": \"nkbihfbeogaeaoehlefnkodbefgpgknn\",\n    \"beta\": \"pbbkamfgmaedccnfkmjcofcecjhfgldn\",\n    \"flask\": \"ljfoeinjpaedjfecbmggjgodbgkmjkjk\"\n  },\n  \"firefoxIds\": {\n    \"stable\": \"webextension@metamask.io\",\n    \"beta\": \"webextension-beta@metamask.io\",\n    \"flask\": \"webextension-flask@metamask.io\"\n  }\n}\n"],"mappings":";;;;;;;;;;;AAAA,SAAS,cAAc;AACvB,OAAO,gBAAgB;;;ACDvB;AAAA,EACE,WAAa;AAAA,IACX,QAAU;AAAA,IACV,MAAQ;AAAA,IACR,OAAS;AAAA,EACX;AAAA,EACA,YAAc;AAAA,IACZ,QAAU;AAAA,IACV,MAAQ;AAAA,IACR,OAAS;AAAA,EACX;AACF;;;ADDA,IAAM,UAAU,OAAO;AAUhB,SAAS,gCACd,WAA0B,UAC1B;AACA,MAAI;AAEJ,MAAI;AACF,UAAM,cAAc,eAAe,QAAQ;AAC3C,UAAM,eAAe,OAAO,QAAQ,QAAQ,WAAW;AAEvD,UAAM,eAAe,IAAI,WAAW,YAAY;AAChD,eAAW,IAAI,eAAe,cAAmC;AAAA,MAC/D,mBAAmB;AAAA,MACnB,QAAQ;AAAA,MACR,eAAe,6BAA6B,OAAO;AAAA,IACrD,CAAC;AAMD,aAAS,WAAW;AAAA,EACtB,SAAS,OAAO;AACd,YAAQ,IAAI,2BAA2B,KAAK;AAC5C,UAAM;AAAA,EACR;AACA,SAAO;AACT;AAQA,SAAS,eAAe,UAAyB;AAC/C,QAAM,MACJ,SAAS,SAAS,YAAY,kCAAO,aAAa,kCAAO;AAC3D,SAAO,IAAI,QAA4B,KAAK;AAC9C;","names":[]}