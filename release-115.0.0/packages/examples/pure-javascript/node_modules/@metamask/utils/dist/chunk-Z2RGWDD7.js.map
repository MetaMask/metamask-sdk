{"version":3,"sources":["../src/collections.ts"],"names":["_map","_set"],"mappings":";;;;;;;AAAA;AAMA,IAAM,YAAN,MAA+D;AAAA,EAW7D,YAAY,SAAqD;AAVjE,uBAAS,MAAT;AAWE,uBAAK,MAAO,IAAI,IAAgB,OAAO;AACvC,WAAO,OAAO,IAAI;AAAA,EACpB;AAAA,EAXA,IAAW,OAAO;AAChB,WAAO,mBAAK,MAAK;AAAA,EACnB;AAAA,EAEA,CAAQ,OAAO,QAAQ,IAAI;AACzB,WAAO,mBAAK,MAAK,OAAO,QAAQ,EAAE;AAAA,EACpC;AAAA,EAOO,UAAU;AACf,WAAO,mBAAK,MAAK,QAAQ;AAAA,EAC3B;AAAA,EAEO,QACL,YACA,SACM;AAGN,WAAO,mBAAK,MAAK;AAAA,MAAQ,CAAC,OAAc,KAAUA,UAChD,WAAW,KAAK,SAAS,OAAO,KAAK,IAAI;AAAA,IAC3C;AAAA,EACF;AAAA,EAEO,IAAI,KAAU;AACnB,WAAO,mBAAK,MAAK,IAAI,GAAG;AAAA,EAC1B;AAAA,EAEO,IAAI,KAAU;AACnB,WAAO,mBAAK,MAAK,IAAI,GAAG;AAAA,EAC1B;AAAA,EAEO,OAAO;AACZ,WAAO,mBAAK,MAAK,KAAK;AAAA,EACxB;AAAA,EAEO,SAAS;AACd,WAAO,mBAAK,MAAK,OAAO;AAAA,EAC1B;AAAA,EAEO,WAAmB;AACxB,WAAO,aAAa,KAAK,IAAI,MAC3B,KAAK,OAAO,IACR,IAAI,CAAC,GAAG,KAAK,QAAQ,CAAC,EACnB,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,GAAG,OAAO,GAAG,CAAC,OAAO,OAAO,KAAK,CAAC,EAAE,EAC1D,KAAK,IAAI,CAAC,MACb,EACN;AAAA,EACF;AACF;AAvDW;AAPX;AAsEA,IAAM,YAAN,MAAqD;AAAA,EAWnD,YAAY,QAAkC;AAV9C,uBAAS,MAAT;AAWE,uBAAK,MAAO,IAAI,IAAW,MAAM;AACjC,WAAO,OAAO,IAAI;AAAA,EACpB;AAAA,EAXA,IAAW,OAAO;AAChB,WAAO,mBAAK,MAAK;AAAA,EACnB;AAAA,EAEA,CAAQ,OAAO,QAAQ,IAAI;AACzB,WAAO,mBAAK,MAAK,OAAO,QAAQ,EAAE;AAAA,EACpC;AAAA,EAOO,UAAU;AACf,WAAO,mBAAK,MAAK,QAAQ;AAAA,EAC3B;AAAA,EAEO,QACL,YACA,SACM;AAGN,WAAO,mBAAK,MAAK;AAAA,MAAQ,CAAC,OAAc,QAAeC,UACrD,WAAW,KAAK,SAAS,OAAO,QAAQ,IAAI;AAAA,IAC9C;AAAA,EACF;AAAA,EAEO,IAAI,OAAc;AACvB,WAAO,mBAAK,MAAK,IAAI,KAAK;AAAA,EAC5B;AAAA,EAEO,OAAO;AACZ,WAAO,mBAAK,MAAK,KAAK;AAAA,EACxB;AAAA,EAEO,SAAS;AACd,WAAO,mBAAK,MAAK,OAAO;AAAA,EAC1B;AAAA,EAEO,WAAmB;AACxB,WAAO,aAAa,KAAK,IAAI,MAC3B,KAAK,OAAO,IACR,IAAI,CAAC,GAAG,KAAK,OAAO,CAAC,EAAE,IAAI,CAAC,WAAW,OAAO,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC,MACjE,EACN;AAAA,EACF;AACF;AAjDW;AAmDX,OAAO,OAAO,SAAS;AACvB,OAAO,OAAO,UAAU,SAAS;AAEjC,OAAO,OAAO,SAAS;AACvB,OAAO,OAAO,UAAU,SAAS","sourcesContent":["/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap<Key, Value> implements ReadonlyMap<Key, Value> {\n  readonly #map: Map<Key, Value>;\n\n  public get size() {\n    return this.#map.size;\n  }\n\n  public [Symbol.iterator]() {\n    return this.#map[Symbol.iterator]();\n  }\n\n  constructor(entries?: readonly (readonly [Key, Value])[] | null) {\n    this.#map = new Map<Key, Value>(entries);\n    Object.freeze(this);\n  }\n\n  public entries() {\n    return this.#map.entries();\n  }\n\n  public forEach(\n    callbackfn: (value: Value, key: Key, map: this) => void,\n    thisArg?: any,\n  ): void {\n    // We have to wrap the specified callback in order to prevent it from\n    // receiving a reference to the inner map.\n    return this.#map.forEach((value: Value, key: Key, _map: unknown) =>\n      callbackfn.call(thisArg, value, key, this),\n    );\n  }\n\n  public get(key: Key) {\n    return this.#map.get(key);\n  }\n\n  public has(key: Key) {\n    return this.#map.has(key);\n  }\n\n  public keys() {\n    return this.#map.keys();\n  }\n\n  public values() {\n    return this.#map.values();\n  }\n\n  public toString(): string {\n    return `FrozenMap(${this.size}) {${\n      this.size > 0\n        ? ` ${[...this.entries()]\n            .map(([key, value]) => `${String(key)} => ${String(value)}`)\n            .join(', ')} `\n        : ''\n    }}`;\n  }\n}\n\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet<Value> implements ReadonlySet<Value> {\n  readonly #set: Set<Value>;\n\n  public get size() {\n    return this.#set.size;\n  }\n\n  public [Symbol.iterator]() {\n    return this.#set[Symbol.iterator]();\n  }\n\n  constructor(values?: readonly Value[] | null) {\n    this.#set = new Set<Value>(values);\n    Object.freeze(this);\n  }\n\n  public entries() {\n    return this.#set.entries();\n  }\n\n  public forEach(\n    callbackfn: (value: Value, value2: Value, set: this) => void,\n    thisArg?: any,\n  ): void {\n    // We have to wrap the specified callback in order to prevent it from\n    // receiving a reference to the inner set.\n    return this.#set.forEach((value: Value, value2: Value, _set: unknown) =>\n      callbackfn.call(thisArg, value, value2, this),\n    );\n  }\n\n  public has(value: Value) {\n    return this.#set.has(value);\n  }\n\n  public keys() {\n    return this.#set.keys();\n  }\n\n  public values() {\n    return this.#set.values();\n  }\n\n  public toString(): string {\n    return `FrozenSet(${this.size}) {${\n      this.size > 0\n        ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n        : ''\n    }}`;\n  }\n}\n\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\n\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n\nexport { FrozenMap, FrozenSet };\n"]}