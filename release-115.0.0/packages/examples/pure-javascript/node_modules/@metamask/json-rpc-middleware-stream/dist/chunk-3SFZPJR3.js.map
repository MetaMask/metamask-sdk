{"version":3,"sources":["../src/createStreamMiddleware.ts"],"names":[],"mappings":";AAKA,OAAO,sBAAsB;AAO7B,SAAS,cAAc;AA2BR,SAAR,uBAAwC,UAAmB,CAAC,GAAG;AACpE,QAAM,QAAe,CAAC;AACtB,QAAM,SAAS,IAAI,OAAO;AAAA,IACxB,YAAY;AAAA,IACZ,MAAM,MAAM;AAAA,IACZ,OAAO;AAAA,EACT,CAAC;AAED,QAAM,SAAS,IAAI,iBAAiB;AAEpC,QAAM,aAA8D,CAClE,KACA,KACA,MACA,QACG;AAEH,UAAM,IAAI,EAAuB,IAAI,EAAE,KAAK,KAAK,MAAM,IAAI;AAE3D,iBAAa,GAAG;AAAA,EAClB;AAEA,SAAO,EAAE,QAAQ,YAAY,OAAO;AAOpC,WAAS,aAAa,KAAqB;AAEzC,WAAO,KAAK,GAAG;AAAA,EACjB;AASA,WAAS,eACP,KACA,WACA,qBACA;AACA,QAAI,WAAyB;AAC7B,QAAI;AACF,YAAM,iBAAiB,CAAC,IAAI;AAC5B,UAAI,gBAAgB;AAClB,4BAAoB,GAAqC;AAAA,MAC3D,OAAO;AACL,wBAAgB,GAAG;AAAA,MACrB;AAAA,IACF,SAAS,MAAM;AACb,iBAAW;AAAA,IACb;AAEA,wBAAoB,QAAQ;AAAA,EAC9B;AAOA,WAAS,gBAAgB,KAA4C;AACnE,UAAM,EAAE,IAAI,WAAW,IAAI;AAC3B,QAAI,eAAe,MAAM;AACvB;AAAA,IACF;AAEA,UAAM,UAAU,MAAM,UAAU;AAChC,QAAI,CAAC,SAAS;AACZ,cAAQ,KAAK,2CAA2C,UAAU,GAAG;AACrE;AAAA,IACF;AAEA,WAAO,MAAM,UAAU;AAEvB,WAAO,OAAO,QAAQ,KAAK,GAAG;AAK9B,eAAW,QAAQ,GAAG;AAAA,EACxB;AAOA,WAAS,oBAAoB,OAA4B;AACvD,QAAI,SAAS,kBAAkB,MAAM,WAAW,QAAQ,gBAAgB;AACtE,yBAAmB;AAAA,IACrB;AACA,WAAO,KAAK,gBAAgB,KAAK;AAAA,EACnC;AAKA,WAAS,qBAAqB;AAC5B,WAAO,OAAO,KAAK,EAAE,QAAQ,CAAC,EAAE,KAAK,aAAa,EAAE,MAAM;AAGxD,UAAI,CAAC,IAAI,IAAI;AACX;AAAA,MACF;AAEA,UAAI,cAAc,GAAG;AACnB,cAAM,IAAI;AAAA,UACR,2DAA2D,IAAI,EAAE;AAAA,QACnE;AAAA,MACF;AACA,YAAM,cAAc,MAAM,IAAI,EAAE;AAChC,UAAI,aAAa;AACf,oBAAY,aAAa,aAAa;AAAA,MACxC;AACA,mBAAa,GAAG;AAAA,IAClB,CAAC;AAAA,EACH;AACF","sourcesContent":["import type {\n  JsonRpcEngineNextCallback,\n  JsonRpcEngineEndCallback,\n  JsonRpcMiddleware,\n} from '@metamask/json-rpc-engine';\nimport SafeEventEmitter from '@metamask/safe-event-emitter';\nimport type {\n  JsonRpcNotification,\n  JsonRpcParams,\n  JsonRpcRequest,\n  PendingJsonRpcResponse,\n} from '@metamask/utils';\nimport { Duplex } from 'readable-stream';\n\ntype IdMapValue = {\n  req: JsonRpcRequest;\n  res: PendingJsonRpcResponse<JsonRpcParams>;\n  next: JsonRpcEngineNextCallback;\n  end: JsonRpcEngineEndCallback;\n  retryCount?: number;\n};\n\ntype IdMap = {\n  [requestId: string]: IdMapValue;\n};\n\ntype Options = {\n  retryOnMessage?: string;\n};\n\n/**\n * Creates a JsonRpcEngine middleware with an associated Duplex stream and\n * EventEmitter. The middleware, and by extension stream, assume that middleware\n * parameters are properly formatted. No runtime type checking or validation is\n * performed.\n *\n * @param options - Configuration options for middleware.\n * @returns The event emitter, middleware, and stream.\n */\nexport default function createStreamMiddleware(options: Options = {}) {\n  const idMap: IdMap = {}; // TODO: replace with actual Map\n  const stream = new Duplex({\n    objectMode: true,\n    read: () => undefined,\n    write: processMessage,\n  });\n\n  const events = new SafeEventEmitter();\n\n  const middleware: JsonRpcMiddleware<JsonRpcParams, JsonRpcParams> = (\n    req,\n    res,\n    next,\n    end,\n  ) => {\n    // register request on id map *before* sending it to the stream, to avoid race issues\n    idMap[req.id as unknown as string] = { req, res, next, end };\n    // write req to stream\n    sendToStream(req);\n  };\n\n  return { events, middleware, stream };\n\n  /**\n   * Forwards JSON-RPC request to the stream.\n   *\n   * @param req - The JSON-RPC request object.\n   */\n  function sendToStream(req: JsonRpcRequest) {\n    // TODO: limiting retries could be implemented here\n    stream.push(req);\n  }\n\n  /**\n   * Writes a JSON-RPC object to the stream.\n   *\n   * @param res - The JSON-RPC response object.\n   * @param _encoding - The stream encoding, not used.\n   * @param streamWriteCallback - The stream write callback.\n   */\n  function processMessage(\n    res: PendingJsonRpcResponse<JsonRpcParams>,\n    _encoding: unknown,\n    streamWriteCallback: (error?: Error | null) => void,\n  ) {\n    let errorObj: Error | null = null;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res as unknown as JsonRpcNotification);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      errorObj = _err as Error;\n    }\n    // continue processing stream\n    streamWriteCallback(errorObj);\n  }\n\n  /**\n   * Processes a JSON-RPC response.\n   *\n   * @param res - The response to process.\n   */\n  function processResponse(res: PendingJsonRpcResponse<JsonRpcParams>) {\n    const { id: responseId } = res;\n    if (responseId === null) {\n      return;\n    }\n\n    const context = idMap[responseId];\n    if (!context) {\n      console.warn(`StreamMiddleware - Unknown response id \"${responseId}\"`);\n      return;\n    }\n\n    delete idMap[responseId];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    // TODO: remove eslint-disable once issue #1989 is resolved.\n    // eslint-disable-next-line @typescript-eslint/no-implied-eval\n    setTimeout(context.end);\n  }\n\n  /**\n   * Processes a JSON-RPC notification.\n   *\n   * @param notif - The notification to process.\n   */\n  function processNotification(notif: JsonRpcNotification) {\n    if (options?.retryOnMessage && notif.method === options.retryOnMessage) {\n      retryStuckRequests();\n    }\n    events.emit('notification', notif);\n  }\n\n  /**\n   * Retry pending requests.\n   */\n  function retryStuckRequests() {\n    Object.values(idMap).forEach(({ req, retryCount = 0 }) => {\n      // Avoid retrying requests without an id - they cannot have matching responses so retry logic doesn't apply\n      // Check for retry count below ensure that a request is not retried more than 3 times\n      if (!req.id) {\n        return;\n      }\n\n      if (retryCount >= 3) {\n        throw new Error(\n          `StreamMiddleware - Retry limit exceeded for request id \"${req.id}\"`,\n        );\n      }\n      const idMapObject = idMap[req.id];\n      if (idMapObject) {\n        idMapObject.retryCount = retryCount + 1;\n      }\n      sendToStream(req);\n    });\n  }\n}\n"]}