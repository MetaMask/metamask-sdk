{"version":3,"sources":["../src/createEngineStream.ts"],"sourcesContent":["import type { JsonRpcEngine } from '@metamask/json-rpc-engine';\nimport type { JsonRpcRequest } from '@metamask/utils';\nimport { Duplex } from 'readable-stream';\n\ntype EngineStreamOptions = {\n  engine: JsonRpcEngine;\n};\n\n/**\n * Takes a JsonRpcEngine and returns a Duplex stream wrapping it.\n *\n * @param opts - Options bag.\n * @param opts.engine - The JsonRpcEngine to wrap in a stream.\n * @returns The stream wrapping the engine.\n */\nexport default function createEngineStream(opts: EngineStreamOptions): Duplex {\n  if (!opts?.engine) {\n    throw new Error('Missing engine parameter!');\n  }\n\n  const { engine } = opts;\n  const stream = new Duplex({ objectMode: true, read: () => undefined, write });\n  // forward notifications\n  if (engine.on) {\n    engine.on('notification', (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n\n  /**\n   * Write a JSON-RPC request to the stream.\n   *\n   * @param req - The JSON-rpc request.\n   * @param _encoding - The stream encoding, not used.\n   * @param streamWriteCallback - The stream write callback.\n   */\n  function write(\n    req: JsonRpcRequest,\n    _encoding: unknown,\n    streamWriteCallback: (error?: Error | null) => void,\n  ) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    streamWriteCallback();\n  }\n}\n"],"mappings":";AAEA,SAAS,cAAc;AAaR,SAAR,mBAAoC,MAAmC;AAC5E,MAAI,CAAC,MAAM,QAAQ;AACjB,UAAM,IAAI,MAAM,2BAA2B;AAAA,EAC7C;AAEA,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,SAAS,IAAI,OAAO,EAAE,YAAY,MAAM,MAAM,MAAM,QAAW,MAAM,CAAC;AAE5E,MAAI,OAAO,IAAI;AACb,WAAO,GAAG,gBAAgB,CAAC,YAAY;AACrC,aAAO,KAAK,OAAO;AAAA,IACrB,CAAC;AAAA,EACH;AACA,SAAO;AASP,WAAS,MACP,KACA,WACA,qBACA;AACA,WAAO,OAAO,KAAK,CAAC,MAAM,QAAQ;AAChC,aAAO,KAAK,GAAG;AAAA,IACjB,CAAC;AACD,wBAAoB;AAAA,EACtB;AACF;","names":[]}