(self.webpackChunk_metamask_sdk_ui=self.webpackChunk_metamask_sdk_ui||[]).push([[9028],{"./src/design-system/components/Checkbox/Checkbox.test.tsx":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var _interopRequireDefault=__webpack_require__("./node_modules/@babel/runtime/helpers/interopRequireDefault.js"),_reactNative=(_interopRequireDefault(__webpack_require__("../devreact/node_modules/react/index.js")),__webpack_require__("./node_modules/@testing-library/react-native/build/index.js")),_Text=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./src/design-system/components/Texts/Text/index.ts")),_theme=__webpack_require__("./src/theme/index.ts"),_Checkbox=_interopRequireDefault(__webpack_require__("./src/design-system/components/Checkbox/Checkbox.tsx")),_Checkbox2=__webpack_require__("./src/design-system/components/Checkbox/Checkbox.constants.ts"),_jsxRuntime=__webpack_require__("../devreact/node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}describe("Checkbox",(function(){it("should render correctly",(function(){var wrapper=(0,_reactNative.render)((0,_jsxRuntime.jsx)(_Checkbox.default,{}));expect(wrapper).toMatchSnapshot()})),it("should render the correct icon when isChecked is true",(function(){var getByTestId=(0,_reactNative.render)((0,_jsxRuntime.jsx)(_Checkbox.default,{isChecked:!0})).getByTestId;expect(getByTestId(_Checkbox2.CHECKBOX_ICON_TESTID).props.name).toBe(_Checkbox2.DEFAULT_CHECKBOX_ISCHECKED_ICONNAME)})),it("should render the correct icon when isIndeterminate is true",(function(){var getByTestId=(0,_reactNative.render)((0,_jsxRuntime.jsx)(_Checkbox.default,{isIndeterminate:!0})).getByTestId;expect(getByTestId(_Checkbox2.CHECKBOX_ICON_TESTID).props.name).toBe(_Checkbox2.DEFAULT_CHECKBOX_ISINDETERMINATE_ICONNAME)})),it("should not render any icon when isChecked and isIndeterminate are false",(function(){var queryByTestId=(0,_reactNative.render)((0,_jsxRuntime.jsx)(_Checkbox.default,{})).queryByTestId;expect(queryByTestId(_Checkbox2.CHECKBOX_ICON_TESTID)).toBe(null)})),it("should not render a label if none is given",(function(){var queryByRole=(0,_reactNative.render)((0,_jsxRuntime.jsx)(_Checkbox.default,{})).queryByRole;expect(queryByRole("text")).toBe(null)})),it("should render Checkbox with the right text variant if typeof label === string",(function(){var getByRole=(0,_reactNative.render)((0,_jsxRuntime.jsx)(_Checkbox.default,{label:"Sample Checkbox Label"})).getByRole;expect(getByRole("text").props.style.fontFamily).toBe(_theme.mockTheme.typography[_Checkbox2.DEFAULT_CHECKBOX_LABEL_TEXTVARIANT].fontFamily)})),it("should render Checkbox with the custom node if typeof label !== string",(function(){var testTextVariant=_Text.TextVariant.DisplayMD,getByRole=(0,_reactNative.render)((0,_jsxRuntime.jsx)(_Checkbox.default,{label:(0,_jsxRuntime.jsx)(_Text.default,{variant:testTextVariant,children:"Sample Checkbox Label"})})).getByRole;expect(getByRole("text").props.style.fontFamily).toBe(_theme.mockTheme.typography[testTextVariant].fontFamily)}))}))}}]);